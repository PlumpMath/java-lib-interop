/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'amunzer' at '7/28/15 10:04 PM' with Gradle 2.3
 *
 * @author amunzer, @date 7/28/15 10:04 PM
 */
package main.java;

import java.util.*;
import java.lang.Thread;

import clojure.java.api.Clojure;
import clojure.lang.IFn;

public class Library {
    public static void main(String [] args) {

        long runForMinutes = 5L;
        Library lib = new Library();
        app.put("instance", lib);
        try {
            lib.init(runForMinutes).start();
        } catch (java.lang.Exception se) {
            System.err.println(se);
        }
    }

    public static Library getInstance() {
        return (Library) app.get("instance");
    }

    private static java.util.Map<Object,Object> app = new java.util.HashMap<Object,Object>();
    
    public Map put(Object key, Object value) {
        app.put(key, value);
        return app;
    }

    protected Library init(Long runForMinutes) {
        app.put("run-for-minutes", runForMinutes);
        app.put("tick-interval", 2);
        return this;
    }

    protected boolean ok(long begin) {
        Long rfm = (Long) app.get("run-for-minutes");
        Integer ticks = (Integer) app.get("ticks");
        Integer interval = (Integer) app.get("tick-interval");
        long end = begin + (1000 * 60 * rfm);
        boolean done = end <= System.currentTimeMillis();
        ticks = ticks == null ? 0 : ticks + 1;
        app.put("ticks", ticks);
        if (ticks % interval == 0) {
            System.out.println(ticks);
        }
        return !done;
    }

    protected Library server() {
        IFn require = Clojure.var("clojure.core", "require");
        require.invoke(Clojure.read("clojure.tools.nrepl.server"));
      
        IFn server = Clojure.var("clojure.tools.nrepl.server", 
                                 "start-server"); // { :port 7888 }
        Object server_map = server.invoke(Clojure.read(":port"), 
                                       7888);
        System.out.println(server_map);
        app.put("server-map", server_map);
        return this;
    }

    public Library serverStop() {
        IFn server = Clojure.var("clojure.tools.nrepl.server", "stop-server"); // { :port 7888 }
        Object server_map = app.get("server-map");
        Object result = server.invoke(server_map);
        System.out.println(result);
        // app.put("server-map", server_map);
        return this;
    }

    protected Library start() {
        new java.lang.Thread() {
            
            private long begin = System.currentTimeMillis();

            @Override
            public void run() {
                server();
                try {
                    while (ok(begin)) {
                        Thread.sleep(5000);
                    }
                } catch (java.lang.InterruptedException e) {
                    System.err.println(e);
                } finally {
                    System.out.println("Stopping");
                    try {
                        serverStop();                    
                    } catch (Exception e) {
                        System.err.println(e);
                    }
                }
            }
        }.start();
        
        System.out.println("Started");
        return this;
    }

    public boolean someLibraryMethod() {
        return true;
    }
}
